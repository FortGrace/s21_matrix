#include "s21_matrix.h"


// s21_create_matrix
#test s21_create_matrix_1
int result_code = 0;
matrix_t result;
result_code = s21_create_matrix(0, 0, &result);
ck_assert_int_eq(1, result_code);

#test s21_create_matrix_2
int result_code = 0;
matrix_t result;
result_code = s21_create_matrix(-2, -1, &result);
ck_assert_int_eq(1, result_code);

#test s21_create_matrix_3
int result_code = 0;
matrix_t result;
result_code = s21_create_matrix(2, 1, &result);
ck_assert_int_eq(0, result_code);
s21_remove_matrix(&result);

// s21_eq_matrix
#test s21_eq_matrix_1
int result_code = 0;
matrix_t matrix1, matrix2;
s21_create_matrix(3, 3, &matrix1);
s21_create_matrix(3, 3, &matrix2);
s21_fill_matrix(&matrix1, 1);
s21_fill_matrix(&matrix2, 1);
result_code = s21_eq_matrix(&matrix1, &matrix2);
ck_assert_int_eq(SUCCESS, result_code);
s21_remove_matrix(&matrix1);
s21_remove_matrix(&matrix2);

#test s21_eq_matrix_2
int result_code = 0;
matrix_t matrix1, matrix2;
s21_create_matrix(3, 3, &matrix1);
s21_create_matrix(3, 3, &matrix2);
s21_fill_matrix(&matrix1, 1);
s21_fill_matrix(&matrix2, 2);
result_code = s21_eq_matrix(&matrix1, &matrix2);
ck_assert_int_eq(FAILURE, result_code);
s21_remove_matrix(&matrix1);
s21_remove_matrix(&matrix2);

#test s21_eq_matrix_3
int result_code = 0;
matrix_t matrix1, matrix2;
s21_create_matrix(3, 3, &matrix1);
s21_create_matrix(2, 3, &matrix2);
s21_fill_matrix(&matrix1, 1);
s21_fill_matrix(&matrix2, 2);
result_code = s21_eq_matrix(&matrix1, &matrix2);
ck_assert_int_eq(FAILURE, result_code);
s21_remove_matrix(&matrix1);
s21_remove_matrix(&matrix2);

#test s21_eq_matrix_4
int result_code = 0;
matrix_t matrix1, matrix2;
s21_create_matrix(3, 3, &matrix1);
s21_create_matrix(3, 3, &matrix2);
s21_fill_matrix(&matrix1, 1);
s21_fill_matrix(&matrix2, 1);
matrix1.matrix[0][0] = 1.0000005;
result_code = s21_eq_matrix(&matrix1, &matrix2);
ck_assert_int_eq(FAILURE, result_code);
s21_remove_matrix(&matrix1);
s21_remove_matrix(&matrix2);

#test s21_eq_matrix_5
int result_code = 0;
result_code = s21_eq_matrix(NULL, NULL);
ck_assert_int_eq(FAILURE, result_code);



// s21_sum_matrix
#test s21_sum_matrix_1
int result_code = 0, eq_code = 0;
matrix_t matrix1, matrix2, matrix3 ,result;
s21_create_matrix(3, 3, &matrix1);
s21_create_matrix(3, 3, &matrix2);
s21_create_matrix(3, 3, &matrix3);
s21_fill_matrix(&matrix1, 1);
s21_fill_matrix(&matrix2, 1);
s21_fill_matrix(&matrix3, 2);
result_code = s21_sum_matrix(&matrix1, &matrix2, &result);
eq_code = s21_eq_matrix(&matrix3, &result);
ck_assert_int_eq(0, result_code);
ck_assert_int_eq(1, eq_code);
s21_remove_matrix(&matrix1);
s21_remove_matrix(&matrix2);
s21_remove_matrix(&matrix3);
s21_remove_matrix(&result);

#test s21_sum_matrix_2
int result_code = 0, eq_code = 0;
matrix_t matrix1, matrix2, matrix3, result;
s21_create_matrix(3, 3, &matrix1);
s21_create_matrix(3, 3, &matrix2);
s21_create_matrix(3, 3, &matrix3);
s21_fill_matrix(&matrix1, 1.5);
s21_fill_matrix(&matrix2, 2.25);
s21_fill_matrix(&matrix3, 3.75);
result_code = s21_sum_matrix(&matrix1, &matrix2, &result);
eq_code = s21_eq_matrix(&matrix3, &result);
ck_assert_int_eq(0, result_code);
ck_assert_int_eq(1, eq_code);
s21_remove_matrix(&matrix1);
s21_remove_matrix(&matrix2);
s21_remove_matrix(&matrix3);
s21_remove_matrix(&result);

#test s21_sum_matrix_3
int result_code = 0, eq_code = 0;
matrix_t matrix1, matrix2, result;
s21_create_matrix(1, 3, &matrix1);
s21_create_matrix(3, 2, &matrix2);
result_code = s21_sum_matrix(&matrix1, &matrix2, &result);
ck_assert_int_eq(2, result_code);
s21_remove_matrix(&matrix1);
s21_remove_matrix(&matrix2);



// s21_sub_matrix
#test s21_sub_matrix_1
int result_code = 0, eq_code = 0;
matrix_t matrix1, matrix2, matrix3 ,result;
s21_create_matrix(3, 3, &matrix1);
s21_create_matrix(3, 3, &matrix2);
s21_create_matrix(3, 3, &matrix3);
s21_fill_matrix(&matrix1, 2);
s21_fill_matrix(&matrix2, 1);
s21_fill_matrix(&matrix3, 1);
result_code = s21_sub_matrix(&matrix1, &matrix2, &result);
eq_code = s21_eq_matrix(&matrix3, &result);
ck_assert_int_eq(0, result_code);
ck_assert_int_eq(1, eq_code);
s21_remove_matrix(&matrix1);
s21_remove_matrix(&matrix2);
s21_remove_matrix(&matrix3);
s21_remove_matrix(&result);

#test s21_sub_matrix_2
int result_code = 0, eq_code = 0;
matrix_t matrix1, matrix2, matrix3, result;
s21_create_matrix(3, 3, &matrix1);
s21_create_matrix(3, 3, &matrix2);
s21_create_matrix(3, 3, &matrix3);
s21_fill_matrix(&matrix1, 3.75);
s21_fill_matrix(&matrix2, 2.25);
s21_fill_matrix(&matrix3, 1.5);
result_code = s21_sub_matrix(&matrix1, &matrix2, &result);
eq_code = s21_eq_matrix(&matrix3, &result);
ck_assert_int_eq(0, result_code);
ck_assert_int_eq(1, eq_code);
s21_remove_matrix(&matrix1);
s21_remove_matrix(&matrix2);
s21_remove_matrix(&matrix3);
s21_remove_matrix(&result);

#test s21_sub_matrix_3
int result_code = 0, eq_code = 0;
matrix_t matrix1, matrix2, result;
s21_create_matrix(1, 3, &matrix1);
s21_create_matrix(3, 2, &matrix2);
result_code = s21_sub_matrix(&matrix1, &matrix2, &result);
ck_assert_int_eq(2, result_code);
s21_remove_matrix(&matrix1);
s21_remove_matrix(&matrix2);



// s21_mult_number
#test s21_mult_number_1
int result_code = 0, eq_code = 0;
double num = 2;
matrix_t matrix1, matrix2, result;
s21_create_matrix(3, 3, &matrix1);
s21_create_matrix(3, 3, &matrix2);
s21_fill_matrix(&matrix1, 1);
s21_fill_matrix(&matrix2, 2);
result_code = s21_mult_number(&matrix1, num, &result);
eq_code = s21_eq_matrix(&matrix2, &result);
ck_assert_int_eq(0, result_code);
ck_assert_int_eq(1, eq_code);
s21_remove_matrix(&matrix1);
s21_remove_matrix(&matrix2);
s21_remove_matrix(&result);

#test s21_mult_number_2
int result_code = 0, eq_code = 0;
double num = 0;
matrix_t matrix1, matrix2, result;
s21_create_matrix(3, 3, &matrix1);
s21_create_matrix(3, 3, &matrix2);
s21_fill_matrix(&matrix1, 1);
s21_fill_matrix(&matrix2, 0);
result_code = s21_mult_number(&matrix1, num, &result);
eq_code = s21_eq_matrix(&matrix2, &result);
ck_assert_int_eq(0, result_code);
ck_assert_int_eq(1, eq_code);
s21_remove_matrix(&matrix1);
s21_remove_matrix(&matrix2);
s21_remove_matrix(&result);

#test s21_mult_number_3
int result_code = 0, eq_code = 0;
double num = -1.2;
matrix_t matrix1, matrix2, result;
s21_create_matrix(3, 3, &matrix1);
s21_create_matrix(3, 3, &matrix2);
s21_fill_matrix(&matrix1, 4.21);
s21_fill_matrix(&matrix2, -5.052);
result_code = s21_mult_number(&matrix1, num, &result);
eq_code = s21_eq_matrix(&matrix2, &result);
ck_assert_int_eq(0, result_code);
ck_assert_int_eq(1, eq_code);
s21_remove_matrix(&matrix1);
s21_remove_matrix(&matrix2);
s21_remove_matrix(&result);



// s21_mult_matrix
#test s21_mult_matrix_1
int result_code = 0, eq_code = 0;
matrix_t matrix1, matrix2, matrix3, result;
s21_create_matrix(3, 3, &matrix1);
s21_create_matrix(3, 3, &matrix2);
s21_create_matrix(3, 3, &matrix3);
s21_fill_matrix(&matrix1, 1);
s21_fill_matrix(&matrix2, 0);
s21_fill_matrix(&matrix3, 0);
result_code = s21_mult_matrix(&matrix1, &matrix2, &result);
eq_code = s21_eq_matrix(&matrix3, &result);
ck_assert_int_eq(0, result_code);
ck_assert_int_eq(1, eq_code);
s21_remove_matrix(&matrix1);
s21_remove_matrix(&matrix2);
s21_remove_matrix(&matrix3);
s21_remove_matrix(&result);

#test s21_mult_matrix_2
int result_code = 0, eq_code = 0;
matrix_t matrix1, matrix2, matrix3, result;
s21_create_matrix(4, 2, &matrix1);
s21_create_matrix(2, 3, &matrix2);
s21_create_matrix(4, 3, &matrix3);
s21_fill_matrix(&matrix1, 4);
s21_fill_matrix(&matrix2, -1.2);
s21_fill_matrix(&matrix3, -9.6);
result_code = s21_mult_matrix(&matrix1, &matrix2, &result);
eq_code = s21_eq_matrix(&matrix3, &result);
ck_assert_int_eq(0, result_code);
ck_assert_int_eq(1, eq_code);
s21_remove_matrix(&matrix1);
s21_remove_matrix(&matrix2);
s21_remove_matrix(&matrix3);
s21_remove_matrix(&result);

#test s21_mult_matrix_3
int result_code = 0, eq_code = 0;
matrix_t matrix1, matrix2, result;
s21_create_matrix(4, 3, &matrix1);
s21_create_matrix(2, 3, &matrix2);
result_code = s21_mult_matrix(&matrix1, &matrix2, &result);
ck_assert_int_eq(2, result_code);
s21_remove_matrix(&matrix1);
s21_remove_matrix(&matrix2);



// s21_transpose
#test s21_transpose_1
int result_code = 0, eq_code = 0;
matrix_t matrix1, matrix2, result;
s21_create_matrix(2, 3, &matrix1);
s21_create_matrix(3, 2, &matrix2);
s21_fill_matrix(&matrix1, 5.5);
s21_fill_matrix(&matrix2, 5.5);
result_code = s21_transpose(&matrix1, &result);
eq_code = s21_eq_matrix(&matrix2, &result);
ck_assert_int_eq(0, result_code);
ck_assert_int_eq(1, eq_code);
s21_remove_matrix(&matrix1);
s21_remove_matrix(&matrix2);
s21_remove_matrix(&result);

#test s21_transpose_2
int result_code = 0, eq_code = 0;
matrix_t matrix1, matrix2, result;
s21_create_matrix(1, 1, &matrix1);
s21_create_matrix(1, 1, &matrix2);
s21_fill_matrix(&matrix1, 5);
s21_fill_matrix(&matrix2, 5);
result_code = s21_transpose(&matrix1, &result);
eq_code = s21_eq_matrix(&matrix2, &result);
ck_assert_int_eq(0, result_code);
ck_assert_int_eq(1, eq_code);
s21_remove_matrix(&matrix1);
s21_remove_matrix(&matrix2);
s21_remove_matrix(&result);



// s21_calc_complements
#test s21_calc_complements_1
int result_code = 0, eq_code = 0;
matrix_t matrix1, matrix2, result;
s21_create_matrix(3, 3, &matrix1);
s21_create_matrix(3, 3, &matrix2);
double list1[9] = {1, 2, 3, 0, 4, 2, 5, 2, 1};
double list2[9] = {0, 10, -20, 4, -14, 8, -8, -2, 4};
s21_fill_matrix_by_list(&matrix1, list1);
s21_fill_matrix_by_list(&matrix2, list2);
result_code = s21_calc_complements(&matrix1, &result);
eq_code = s21_eq_matrix(&matrix2, &result);
ck_assert_int_eq(0, result_code);
ck_assert_int_eq(1, eq_code);
s21_remove_matrix(&matrix1);
s21_remove_matrix(&matrix2);
s21_remove_matrix(&result);

#test s21_calc_complements_2
int result_code = 0;
matrix_t matrix1, result;
s21_create_matrix(2, 3, &matrix1);
result_code = s21_calc_complements(&matrix1, &result);
ck_assert_int_eq(2, result_code);
s21_remove_matrix(&matrix1);

#test s21_calc_complements_3
int result_code = 0, eq_code = 0;
matrix_t matrix1, matrix2, result;
s21_create_matrix(1, 1, &matrix1);
s21_create_matrix(1, 1, &matrix2);
s21_fill_matrix(&matrix1, 1);
s21_fill_matrix(&matrix2, 1);
result_code = s21_calc_complements(&matrix1, &result);
eq_code = s21_eq_matrix(&matrix2, &result);
ck_assert_int_eq(0, result_code);
ck_assert_int_eq(1, eq_code);
s21_remove_matrix(&matrix1);
s21_remove_matrix(&matrix2);
s21_remove_matrix(&result);

// s21_calc_complements
#test s21_calc_complements_4
int result_code = 0, eq_code = 0;
matrix_t matrix1, matrix2, result;
s21_create_matrix(4, 4, &matrix1);
s21_create_matrix(4, 4, &matrix2);
double list1[16] = {-3, 1, 8, 2, -1, 6, 4, 2, -7, 2, 4, 2, 4, 7, 2, 7};
double list2[16] = {96, -144, 228, 24, 24, 324, 57, -354, -232, -12, -131, 182, 32, -48, -44, 248};
s21_fill_matrix_by_list(&matrix1, list1);
s21_fill_matrix_by_list(&matrix2, list2);
result_code = s21_calc_complements(&matrix1, &result);
eq_code = s21_eq_matrix(&matrix2, &result);
ck_assert_int_eq(0, result_code);
ck_assert_int_eq(1, eq_code);
s21_remove_matrix(&matrix1);
s21_remove_matrix(&matrix2);
s21_remove_matrix(&result);


// s21_determinant
#test s21_determinant_1
int result_code = 0;
double determinant = 0;
matrix_t matrix1;
s21_create_matrix(1, 1, &matrix1);
s21_fill_matrix(&matrix1, 1);
result_code = s21_determinant(&matrix1, &determinant);
ck_assert_int_eq(0, result_code);
ck_assert_int_eq(1, determinant);
s21_remove_matrix(&matrix1);

#test s21_determinant_2
int result_code = 0;
double determinant = 0;
matrix_t matrix1;
s21_create_matrix(3, 2, &matrix1);
s21_fill_matrix(&matrix1, 1);
result_code = s21_determinant(&matrix1, &determinant);
ck_assert_int_eq(2, result_code);
s21_remove_matrix(&matrix1);



// s21_inverse_matrix
#test s21_inverse_matrix_1
int result_code = 0, eq_code = 0;
matrix_t matrix1, matrix2, result;
s21_create_matrix(3, 3, &matrix1);
s21_create_matrix(3, 3, &matrix2);
double list1[9] = {2, 5, 7, 6, 3, 4, 5, -2, -3};
double list2[9] = {1, -1, 1, -38, 41, -34, 27, -29, 24};
s21_fill_matrix_by_list(&matrix1, list1);
s21_fill_matrix_by_list(&matrix2, list2);
result_code = s21_inverse_matrix(&matrix1, &result);
eq_code = s21_eq_matrix(&matrix2, &result);
ck_assert_int_eq(0, result_code);
ck_assert_int_eq(1, eq_code);
s21_remove_matrix(&matrix1);
s21_remove_matrix(&matrix2);
s21_remove_matrix(&result);

#test s21_inverse_matrix_2
int result_code = 0;
matrix_t matrix1, result;
s21_create_matrix(2, 4, &matrix1);
result_code = s21_inverse_matrix(&matrix1, &result);
ck_assert_int_eq(2, result_code);
s21_remove_matrix(&matrix1);

#test s21_inverse_matrix_3
int result_code = 0, eq_code = 0;
matrix_t matrix1, result;
s21_create_matrix(3, 3, &matrix1);
double list1[9] = {1, 2, 3, 4, 5, 6, 7, 8, 9};
s21_fill_matrix_by_list(&matrix1, list1);
result_code = s21_inverse_matrix(&matrix1, &result);
ck_assert_int_eq(2, result_code);
s21_remove_matrix(&matrix1);
